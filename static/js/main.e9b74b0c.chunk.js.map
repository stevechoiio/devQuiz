{"version":3,"sources":["views/Start.jsx","components/Option.jsx","components/Options.jsx","views/Quiz.jsx","views/Result.jsx","App.js","serviceWorker.js","index.js"],"names":["buttonStyle","minWidth","marginTop","marginRight","marginLeft","minHeight","Start","_this","this","quizList","props","quiz","react_default","a","createElement","style","fontSize","className","margin","map","title","key","Button","bsStyle","bsSize","onClick","quizHandler","Component","Option","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","stateRefresh","setState","color","clickHandler","e","preventDefault","answer","scoreHandler","setTimeout","state","padding","children","progressBarStyle","maxWidth","Options","questionPage","questionPageHandler","length","done","console","log","_this2","now","questionTitle","optionArray","marginBottom","option","index","components_Option","ProgressBar","currentScore","QUIZ","require","Quiz","questionNumber","quizNumber","components_Options","Result","size","back","bgStyle","height","alignContent","textAlign","App","viewHandler","viewResult","tryAgain","bind","assertThisInitialized","Well","views_Result","views_Quiz","views_Start","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e9b74b0c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\n\nconst buttonStyle = {\n  minWidth: 200,\n  marginTop: 100,\n  marginRight: 50,\n  marginLeft: 50,\n  minHeight: 100\n};\n\nclass Start extends Component {\n  render() {\n    const quizList = this.props.quiz[\"quizzes\"];\n\n    return (\n      <div>\n        <span style={{ fontSize: \"5em\" }}>\n          <i className={\"fas fa-question\"} />\n        </span>\n        <h1 style={{ margin: \"50px\" }}>Answer a Quiz!</h1>\n\n        {/* renders list of quizzes from quiz.json */}\n        {quizList.map((title, key) => {\n          return (\n            <Button\n              style={buttonStyle}\n              bsStyle=\"primary\"\n              bsSize=\"large\"\n              key={key}\n              onClick={() => this.props.quizHandler({ key })}\n            >\n              <h4>{title[\"title\"]}</h4>\n            </Button>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Start;\n","import React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\n\nclass Option extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color: \"default\"\n    };\n  }\n  stateRefresh = () => {\n    this.setState({ color: \"default\" });\n  };\n  clickHandler = e => {\n    e.preventDefault();\n    if (this.props.answer) {\n      this.setState({ color: \"success\" });\n      this.props.scoreHandler();\n    } else {\n      this.setState({ color: \"danger\" });\n    }\n    setTimeout(this.stateRefresh, 2000);\n    setTimeout(this.props.onClick, 2000);\n  };\n  render() {\n    return (\n      <div>\n        <Button\n          style={{\n            minWidth: 300,\n\n            padding: \"10px\",\n            margin: \"5px\"\n          }}\n          bsStyle={this.state.color}\n          onClick={this.clickHandler}\n        >\n          {this.props.children}\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default Option;\n","import React, { Component } from \"react\";\nimport Option from \"./Option\";\nimport { ProgressBar } from \"react-bootstrap\";\n\nconst progressBarStyle = {\n  maxWidth: \"500px\",\n  marginTop: 50,\n  marginLeft: \"auto\",\n  marginRight: \"auto\"\n};\n\nclass Options extends Component {\n  state = { questionPage: 0 };\n  questionPageHandler = () => {\n    //check to see if there are any questions left, if not, then shows result page\n    if (this.state.questionPage == this.props.quiz[\"questions\"].length - 1) {\n      this.props.done();\n    }\n    this.setState({ questionPage: this.state.questionPage + 1 });\n    console.log(\"clicked!!\");\n  };\n  render() {\n    let now = 100 * ((this.state.questionPage + 1) / 4);\n    let questionTitle = this.props.quiz[\"questions\"][this.state.questionPage][\n      \"question\"\n    ];\n    let optionArray = this.props.quiz[\"questions\"][this.state.questionPage][\n      \"answers\"\n    ];\n    return (\n      <div>\n        <h3 style={{ marginBottom: 50 }}>{questionTitle}</h3>\n\n        {optionArray.map((option, index) => {\n          return (\n            <Option\n              scoreHandler={this.props.scoreHandler}\n              onClick={this.questionPageHandler}\n              key={index}\n              answer={option[\"value\"]}\n            >\n              {option[\"content\"]}\n            </Option>\n          );\n        })}\n        <ProgressBar style={progressBarStyle} now={now} />\n        <h5>Your current score: {this.props.currentScore}</h5>\n      </div>\n    );\n  }\n}\n\nexport default Options;\n","import React, { Component } from \"react\";\nimport Options from \"../components/Options\";\nconst QUIZ = require(\"../quiz.json\");\n\nclass Quiz extends Component {\n  state = { questionNumber: 0 };\n  render() {\n    {\n      console.log(\"your current score:\", this.props.currentScore);\n    }\n    let quiz = QUIZ[\"quizzes\"][this.props.quizNumber];\n    console.log(\"quiz is:\", quiz[\"title\"]);\n    return (\n      <div>\n        <h1>{quiz[\"title\"]}</h1>\n        <Options\n          currentScore={this.props.currentScore}\n          scoreHandler={this.props.scoreHandler}\n          done={this.props.done}\n          quiz={quiz}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Quiz;\n\n// // To Do: render result page\n// //        button color back to original state\n// //         ?return button?\n// //         css change\n\n// import React, { Component } from \"react\";\n// import Option from \"./Option\";\n// class Quiz extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       questionNumber: 0\n//     };\n//     this.answerVerifier = this.answerVerifier.bind(this);\n//   }\n\n// //   answerVerifier(key) {\n// //     // check to see if the response is correct, if correct, increment score by 1\n// //     if (\n// //       this.props.quiz[\"quizzes\"][this.state.quizNumber][\"questions\"][\n// //         this.state.questionNumber\n// //       ][\"answers\"][key][\"value\"]\n// //     ) {\n// //       this.setState({ score: this.state.score + 1 });\n// //     }\n\n// //     // 2 second delay before the next questions\n// //     setTimeout(() => {\n// //       this.setState({\n// //         questionNumber: this.state.questionNumber + 1\n// //       });\n// //     }, 2000);\n// //   }\n\n// //   render() {\n// //     if (\n// //       this.props.quiz[\"quizzes\"][this.state.quizNumber][\"questions\"].length >\n// //       this.state.questionNumber\n// //     ) {\n// //       this.setState({\n// //         answerOptions: this.props.quiz[\"quizzes\"][this.state.quizNumber][\n// //           \"questions\"\n// //         ]\n// //       });\n// //     }\n\n// //     return (\n// //       <div>\n// //         {/* {console.log(\n// //           \"current number of questions? \",\n// //           this.props.quiz[\"quizzes\"][this.state.quizNumber][\"questions\"].length\n// //         )}\n\n// //         {this.props.quiz[\"quizzes\"][this.state.quizNumber][\"questions\"].length <\n// //         this.state.questionNumber\n// //           ? console.log(\"more questions left? \", true)\n// //           : console.log(\"more questions left? \", false)}\n\n// //         {this.props.quiz[\"quizzes\"][this.state.quizNumber][\"title\"]}\n// //         {console.log(\"first option\", this.state.answerOptions[0][\"content\"])} */}\n// //         <h1>\n// //           {\n// //             this.props.quiz[\"quizzes\"][this.state.quizNumber][\"questions\"][\n// //               this.state.questionNumber\n// //             ][\"question\"]\n// //           }\n// //         </h1>\n// //         {this.state.answerOptions.map((option, index) => {\n// //           return (\n// //             // <Button\n// //             //   bsSize=\"large\"\n// //             //   key={key}\n// //             //   onClick={() => this.answerVerifier(key)}\n// //             // >\n// //             //   {option[\"content\"]}\n// //             // </Button>\n// //             <Option\n// //               index={index}\n// //               onClickHandler={this.answerVerifier}\n// //               answer={option[\"value\"]}\n// //             >\n// //               {option[\"content\"]}\n// //             </Option>\n// //           );\n// //         })}\n// //         <h1>{this.state.score}</h1>\n// //       </div>\n// //     );\n// //   }\n// // }\n\n// export default Quiz;\n","import React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\n\nclass Result extends Component {\n  state = {};\n  render() {\n    return (\n      <div style={{ marginTop: 150 }}>\n        <h3>\n          Your final score is: <br />\n          <h1>{this.props.currentScore}</h1>\n        </h3>\n        {this.props.currentScore > 1 ? (\n          <h1>\n            <i style={{ size: 50 }} className=\"fas fa-thumbs-up\" />\n            <br />\n            Pass!\n          </h1>\n        ) : (\n          <h1>\n            <i style={{ size: 50 }} className=\"fas fa-thumbs-down\" />\n            <br />\n            Fail\n          </h1>\n        )}\n        <Button\n          style={{ margin: 100 }}\n          bsSize=\"large\"\n          bsStyle=\"info\"\n          onClick={this.props.back}\n        >\n          Try again?\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default Result;\n","import React, { Component } from \"react\";\nimport Start from \"./views/Start\";\nimport Quiz from \"./views/Quiz\";\nimport Result from \"./views/Result\";\nimport { Well } from \"react-bootstrap\";\n\n// json data\nconst quiz = require(\"./quiz.json\");\n\nconst bgStyle = {\n  maxWidth: \"50%\",\n  height: 600,\n\n  alignContent: \"center\",\n  textAlign: \"center\",\n  marginLeft: \"auto\",\n  marginRight: \"auto\",\n  marginTop: 100\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { quizNumber: false, viewResult: false, currentScore: 0 };\n    this.quizHandler = this.quizHandler.bind(this);\n  }\n  // listens for the user's quiz selection\n  quizHandler(key) {\n    this.setState({ quizNumber: key });\n    console.log(\"quiznumber has changed to key #\", key);\n  }\n  //switch between start/result/quiz view\n  viewHandler = () => {\n    this.setState({ viewResult: true });\n  };\n  // keeps track of user's score\n  scoreHandler = () => {\n    this.setState({ currentScore: this.state.currentScore + 1 });\n  };\n  // reset\n  tryAgain = () => {\n    this.setState({ viewResult: false, quizNumber: false });\n  };\n  render() {\n    console.log(this.state);\n    return (\n      <div>\n        <div style={{ textAlign: \"center\" }}>\n          <Well style={bgStyle}>\n            {/* render selection then when the user selects a quiz, it \n            renders the quiz, and renders result when there is a result */}\n\n            {!this.state.quizNumber ? (\n              <Start\n                quiz={quiz}\n                quizNumber={this.state.quizNumber}\n                quizHandler={this.quizHandler}\n              />\n            ) : this.state.viewResult ? (\n              <Result\n                currentScore={this.state.currentScore}\n                back={this.tryAgain}\n              />\n            ) : (\n              <Quiz\n                done={this.viewHandler}\n                quizNumber={this.state.quizNumber.key}\n                scoreHandler={this.scoreHandler}\n                currentScore={this.state.currentScore}\n              />\n            )}\n          </Well>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}